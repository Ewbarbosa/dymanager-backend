// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev 

// Enum para o campo gender
// enum Gender {
//   MASCULINO // Masculino
//   FEMININO // Feminino
//   OUTRO // Outro  
// }

// Enum para o estado civil
// enum MaritalStatus {
//   SOLTEIRO // Solteiro(a)
//   CASADO // Casado(a)
//   DIVORCIADO // Divorciado(a)
//   VIUVO // Viúvo(a)
//   SEPARADO // Separado(a)
//   OUTRO // Outro
// }

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  contact Contact[]
  process Process[]
  address Address[]

  @@map("users")
}

// Tabela Profile para gerenciamento de acessos
model Profile {
  id          Int       @id @default(autoincrement())
  name        String    @unique // Nome do perfil (ex: Admin, User, Manager)
  description String? // Descrição do perfil (opcional)
  permissions Json? // JSON com lista de permissões (opcional)
  createdAt   DateTime? @default(now()) // Data de criação
  updatedAt   DateTime? @updatedAt // Data da última atualização

  users User[] // Relacionamento reverso com User

  @@map("profiles") // Nome da tabela no banco de dados
}

model Contact {
  id        Int     @id @default(autoincrement())
  cpfCnpj   String  @unique // CPF ou CNPJ único e obrigatório
  isCompany Boolean @default(false) // Define se é uma empresa (true) ou pessoa física (false)

  // Campos para pessoa física
  fullName      String? // Nome completo
  rg            String? // Registro Geral (opcional)
  dateOfBirth   DateTime? // Data de nascimento
  gender        String? // Sexo
  nationality   String? // Nacionalidade
  maritalStatus String? // Estado civil
  phone         String? // Telefone (opcional)
  email         String? // E-mail (opcional)
  occupation    String? // Profissão (opcional)  
  workCard      String? // Carteira de trabalho
  pisNumber     String? // Número do PIS  
  fatherName    String? // Nome do pai
  motherName    String? // Nome da mãe

  // Campos para pessoa jurídica
  companyName           String? // Razão Social
  tradeName             String? // Nome Fantasia (opcional)
  stateRegistration     String? // Inscrição Estadual (opcional)
  municipalRegistration String? // Inscrição Municipal (opcional)
  responsiblePerson     String? // Nome do responsável (opcional)
  responsibleCpf        String? // CPF do responsável (opcional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o usuário que criou o contato
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Relacionamentos com outras tabelas
  Address        Address[] // Endereços associados ao contato
  ContactProcess ContactProcess[] // Relacionamento n-n com processos
  BankAccount    BankAccount[] // Contas bancárias associadas ao contato

  @@index([cpfCnpj], name: "cpf_index")
  @@map("contacts")
}

model Process {
  id            Int       @id @default(autoincrement())
  forum         String? // forum
  processNumber String    @unique // numero do processo
  courtDivision String? // vara
  action        String? // ação
  distributedAt DateTime?
  causeValue    Float?
  status        String?
  observation   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  ContactProcess ContactProcess[]

  @@map("processes")
}

// relacionamento n para n
model ContactProcess {
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  process   Process @relation(fields: [processId], references: [id])
  processId Int

  role String // Definindo o papel do contato, como 'Autor' ou 'Réu'

  createdAt DateTime @default(now())

  @@id([contactId, processId])
  @@map("contactProcess")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String? // rua com numero
  postalCode String? // cep
  district   String? // bairro
  city       String? // cidade
  state      String? // estado

  // aqui está o relacionamento
  // a tabela cliente pode ter varios endereços
  // o campo client_id é chave estrangeira
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("addresses")
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String // nome do banco
  code Int // codigo do banco

  // relations
  bankAccount BankAccount[]

  @@map("banks")
}

model BankAccount {
  id      Int @id @default(autoincrement())
  agency  Int // agencia
  account Int // conta

  // aqui é uma relação entre tabelas

  bank   Bank @relation(fields: [bankId], references: [id])
  bankId Int // código do banco

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int // id do cliente  

  @@map("banAccounts")
}

// Anotação apenas
