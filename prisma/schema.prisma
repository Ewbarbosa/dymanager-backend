// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev 

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  person  Person[] // criado por user id tal // relação 1 - n
  calls   Call[]
  process Process[]
  address Address[]

  @@map("users")
}

model Person {
  id                 Int       @id @default(autoincrement())
  name               String? // nome completo
  rg                 String? // rg
  cnpjcpf            String    @unique // cpf ou cnpj
  sex                String? // sexo
  nationality        String? // nacionalidade
  born_in            DateTime? // nascimento
  marital_status     String? // estado civil
  telephone          String? // telefone
  telephone2         String? // telefone 2
  email              String? // email pessoal
  work_card          String? // carteira de trabalho
  pis                String? // pis
  parent_affiliation String? // nome da mãe
  mother_affiliation String? // nome do pai
  type               String? // cliente ou adverso
  status             String? // ativo ou inativo

  user    User @relation(fields: [user_id], references: [id])
  user_id Int // criado por user id tal // relação 1 - n

  created_at DateTime? @default(now()) // criado em
  updated_at DateTime? @default(now()) // atualizado em  

  address           Address[] // endereço
  professional_data Professional_Data[] // dados profissionais
  calls             Call[] // atendimentos
  loans             Loan[] // emprestimos
  bank_account      Bank_account[] // conta em banco

  PersonProcess PersonProcess[]

  @@map("persons")
}

model Professional_Data {
  id             Int       @id @default(autoincrement())
  company        String? // empresa onde trabalha
  office         String? // profissão
  salary         Float? // salário
  admission_at   DateTime? // data de admissão
  resignation_at DateTime? // data de demissão
  last_day       DateTime? // último dia trabalhado
  observation    String?

  person    Person @relation(fields: [person_id], references: [id])
  person_id Int

  @@map("professional_data")
}

model Process {
  id             Int       @id @default(autoincrement())
  forum          String? // forum
  number_process String    @unique // numero do processo
  court_division String? // vara
  action         String? // ação
  distributed_at DateTime?
  cause_value    Float?
  status         String?
  observation    String?

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  //client    Client @relation(fields: [client_id], references: [id])
  //client_id Int // criado por user id tal // relação 1 - n

  //client_id Int
  //client Client @relation(fields: [client_id], references: [id])  
  PersonProcess PersonProcess[]

  @@map("process")
}

// relacionamento n para n
model PersonProcess {
  person    Person @relation(fields: [person_id], references: [id])
  person_id Int

  process    Process @relation(fields: [process_id], references: [id])
  process_id Int

  created_at DateTime @default(now())

  @@id([person_id, process_id])
  @@map("person_process")
}

model Address {
  id       Int     @id @default(autoincrement())
  street   String? // rua com numero
  zip_code String? // cep
  district String? // bairro
  city     String? // cidade
  state    String? // estado

  // aqui está o relacionamento
  // a tabela cliente pode ter varios endereços
  // o campo client_id é chave estrangeira
  person    Person @relation(fields: [person_id], references: [id])
  person_id Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  @@map("address")
}

model Call {
  id              Int       @id @default(autoincrement())
  start           DateTime? @default(now())
  end             DateTime? @default(now())
  contact_channel String?

  // relations
  person    Person @relation(fields: [person_id], references: [id])
  person_id Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  loan Loan?

  @@map("calls")
}

model Loan {
  id             Int       @id @default(autoincrement())
  n_installments Int // numero de parcelas
  v_installments Float // valor das parcelas
  amount         Float
  start          DateTime
  end            DateTime
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())
  category       String

  // relations  
  bank_account    Bank_account @relation(fields: [bank_account_id], references: [id])
  bank_account_id Int          @unique

  // one to one
  call    Call @relation(fields: [call_id], references: [id])
  call_id Int  @unique

  person    Person @relation(fields: [person_id], references: [id])
  person_id Int

  @@map("loans")
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String // nome do banco
  code Int // codigo do banco

  // relations
  bank_account Bank_account[]

  @@map("banks")
}

model Bank_account {
  id      Int @id @default(autoincrement())
  agency  Int // agencia
  account Int // conta

  // aqui é uma relação entre tabelas
  loan Loan?

  bank    Bank @relation(fields: [bank_id], references: [id])
  bank_id Int // código do banco

  person    Person @relation(fields: [person_id], references: [id])
  person_id Int // id do cliente  

  @@map("bank_account")
}

// Anotação apenas
