// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev 

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
  profileId Int

  contact Contact[]
  calls   Call[]
  process Process[]
  address Address[]  

  @@map("users")
}

// Tabela Profile para gerenciamento de acessos
model Profile {
  id                Int       @id @default(autoincrement())
  name              String    @unique // Nome do perfil (ex: Admin, User, Manager)
  description       String?   // Descrição do perfil (opcional)
  permissions       Json?      // JSON com lista de permissões (opcional)
  createdAt         DateTime?  @default(now()) // Data de criação
  updatedAt         DateTime?  @updatedAt      // Data da última atualização

  users             User[]    // Relacionamento reverso com User

  @@map("profiles") // Nome da tabela no banco de dados
}

// Tabela para Pessoa Física
model Contact {
  id                    Int            @id @default(autoincrement())
  cpfCnpj               String         @unique // CPF único e obrigatório
  fullName              String? // Nome completo
  rg                    String? // Registro Geral (opcional)
  dateOfBirth           DateTime? // Data de nascimento
  gender                Gender? // Sexo (enum)
  nationality           String? // Nacionalidade
  maritalStatus         MaritalStatus? // Estado civil (opcional)
  phone                 String? // Telefone (opcional)
  email                 String? // E-mail (opcional)
  occupation            String? // Profissão (opcional)  
  workCard              String?
  pisNumber             String?
  fatherName            String?
  motherName            String?
  companyName           String? // Razão Social  
  tradeName             String? // Nome Fantasia (opcional)
  stateRegistration     String? // Inscrição Estadual (opcional)
  municipalRegistration String? // Inscrição Municipal (opcional)
  responsiblePerson     String? // Nome do responsável (opcional)
  responsibleCpf        String? // CPF do responsável (opcional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int // criado pelo userId // relação 1 - n

  Address        Address[] // endereço
  ContactProcess ContactProcess[]
  Call           Call[]
  Loan           Loan[]
  BankAccount   BankAccount[]

  @@index([cpfCnpj], name: "cpf_index")
  @@map("contacts")
}

// Enum para o campo gender
enum Gender {
  MASCULINO // Masculino
  FEMININO // Feminino
  OUTRO // Outro  
}

// Enum para o estado civil
enum MaritalStatus {
  SOLTEIRO // Solteiro(a)
  CASADO // Casado(a)
  DIVORCIADO // Divorciado(a)
  VIUVO // Viúvo(a)
  SEPARADO // Separado(a)
  OUTRO // Outro
}

model Process {
  id            Int       @id @default(autoincrement())
  forum         String? // forum
  processNumber String    @unique // numero do processo
  courtDivision String? // vara
  action        String? // ação
  distributedAt DateTime?
  causeValue    Float?
  status        String?
  observation   String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  ContactProcess ContactProcess[]

  @@map("processes")
}

// relacionamento n para n
model ContactProcess {
  contact  Contact @relation(fields: [contactId], references: [id])
  contactId Int

  process   Process @relation(fields: [processId], references: [id])
  processId Int

  createdAt DateTime @default(now())

  @@id([contactId, processId])
  @@map("contactProcess")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String? // rua com numero
  postalCode String? // cep
  district   String? // bairro
  city       String? // cidade
  state      String? // estado

  // aqui está o relacionamento
  // a tabela cliente pode ter varios endereços
  // o campo client_id é chave estrangeira
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("addresses")
}

model Call {
  id             Int       @id @default(autoincrement())
  start          DateTime? @default(now())
  end            DateTime? @default(now())
  contactChannel String?

  // relations
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  loan Loan?

  @@map("calls")
}

model Loan {
  id            Int       @id @default(autoincrement())
  nInstallments Int // numero de parcelas
  vInstallments Float // valor das parcelas
  amount        Float
  start         DateTime
  end           DateTime
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now())
  category      String

  // relations  
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId Int         @unique

  // one to one
  call   Call @relation(fields: [callId], references: [id])
  callId Int  @unique

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  @@map("loans")
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String // nome do banco
  code Int // codigo do banco

  // relations
  bankAccount BankAccount[]

  @@map("banks")
}

model BankAccount {
  id      Int @id @default(autoincrement())
  agency  Int // agencia
  account Int // conta

  // aqui é uma relação entre tabelas
  loan Loan?

  bank   Bank @relation(fields: [bankId], references: [id])
  bankId Int // código do banco

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int // id do cliente  

  @@map("banAccounts")
}

// Anotação apenas
